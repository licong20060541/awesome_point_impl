apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.0.0-beta1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}


// ******************** 注意：apply plugin: 'com.android.library' ************** //

// 补充：依赖jar包处理

//task makeJar(type: Jar) {
//    archiveName = 'domob_android_sdk.jar'
//    from('build/intermediates/classes/release/')
//    from(project.zipTree('libs/aaa.jar'))
//    from(project.zipTree('libs/bbb.jar'))
//    from(project.zipTree('libs/ccc.jar'))
//    destinationDir = file('build/lib')
//}


// 方法一，Good

task makeJar(type: Jar) { // 删除原来的jar包
    delete 'build/libs/*.jar'
    from file('build/intermediates/classes/release') // 从哪个目录下生成
    archiveName = 'licong12.jar' //生成的名字
    destinationDir = file('build/libs') //生成的目录
    //过滤不需要的class，防止使用的时候出现dex错误
//    exclude 'com/point/makejar/BuildConfig.class'
    exclude "**/**/BuildConfig.class"
    exclude "**/**/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"
    //指定打包的class，前面为包名
    include "com/point/makejar/**/*.class"
}

makeJar.dependsOn(build)

//混淆jar 点击右侧other任务中，直接执行即可
task myproguard(dependsOn: ['makeJar'], type: proguard.gradle.ProGuardTask) {
    //输入的jar路径
    injars 'build/libs/licong12.jar'
    //输出的jar路径
    outjars 'build/libs/licong12_proguard.jar'
    //混淆配置
    configuration 'proguard-rules.pro'
}


// 方法二 todo
//
//def SDK_BASENAME = "TestSdk"
//def SDK_VERSION = "_V1.0"
//def sdkDestinationPath = "build"
//def zipFile = file('build/intermediates/bundles/release/classes.jar')
//
//task deleteBuild(type: Delete) {
//    delete sdkDestinationPath + "/" + SDK_BASENAME + SDK_VERSION + ".jar"
//}
//
//task makeJar(type: Jar) {
//    from zipTree(zipFile)
//    from fileTree(dir: 'src/main', includes: ['assets/**']) // 将assets目录打入jar包
//    baseName = SDK_BASENAME + SDK_VERSION
//    destinationDir = file(sdkDestinationPath)
//}
//
//makeJar.dependsOn(deleteBuild, build)
